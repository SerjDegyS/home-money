{"ast":null,"code":"import { BaseApi } from '../../../shared/core/base-api';\nimport { from, of } from 'rxjs';\nimport { catchError, concatMap, delay, map, mergeMap, scan, takeLast, toArray } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EventsService = /*#__PURE__*/(() => {\n  class EventsService extends BaseApi {\n    constructor(http) {\n      super(http);\n      this.http = http;\n      this.postEvent = e => {\n        console.log('request');\n        return this.post('events', e).pipe(map(res => {\n          return res === null ? e : res;\n        }), catchError(err => {\n          console.log(err);\n          return of(null);\n        }));\n      };\n    }\n    addEvents(events) {\n      return from(events).pipe(concatMap(e => this.postEvent(e).pipe(delay(1000))), toArray());\n    }\n    getEvents(categoryId) {\n      return this.get(`events?categoryId=${categoryId}`);\n    }\n    getEventsById(id) {\n      return this.get(`events/${id}`);\n    }\n    deleteEvent(event) {\n      return this.delete('events', event);\n    }\n    getEventsForCategories(cats) {\n      return from(cats).pipe(mergeMap(cat => this.getEvents(cat.id)), scan((acum, cur) => Array.of(...acum, ...cur), []), takeLast(1));\n    }\n    deleteEventsOfCategory(cat) {\n      return this.getEventsForCategories([cat]).pipe(mergeMap(events => from(events).pipe(mergeMap(ev => this.deleteEvent(ev)), toArray())));\n    }\n  }\n  EventsService.ɵfac = function EventsService_Factory(t) {\n    return new (t || EventsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  EventsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EventsService,\n    factory: EventsService.ɵfac\n  });\n  return EventsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}